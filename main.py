#############################################################################
#######                                                            ##########               
#######                                                            ##########               
#######                     Zahra Habibi                           ##########               
#######       PyQt GUI interface used for calibration              ##########               
#######  between Face Lab eye-tracker and Intel Real-Sense Cameras ##########               
#######                 using PnP OpenCV algorithm                 ##########               
#######                                                            ##########               
#######       QtThread & Mutex used for synchronization            ##########    
#######                      2024-03-11                            ##########               
#######                                                            ##########               
#############################################################################

from PyQt5 import QtCore, QtGui, QtWidgets

from util.Facelab import FacelabThread
from util.StereoSystem import CameraThread

class Ui_MainWindow(object):
    
    def setupUi(self, MainWindow):
        
        ################### These UI codes generated by from QtDesigner #################
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        ## size of main window
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(5, 5, 660, 500))
        self.graphicsView.setObjectName("graphicsView")
        
        ## size of buttons related to video captures, start/stop
        newfont = QtGui.QFont("Times", 10, QtGui.QFont.Bold) 
        self.VideoLabel = QtWidgets.QLabel(self.centralwidget)
        self.VideoLabel.setGeometry(QtCore.QRect(5, 530, 141, 41))
        self.VideoLabel.setObjectName("VideoCapture")
        self.VideoLabel.setFont(newfont)
        self.StartVideoButton = QtWidgets.QPushButton(self.centralwidget)
        self.StartVideoButton.setGeometry(QtCore.QRect(5, 570, 141, 41))
        self.StartVideoButton.setObjectName("Start")
        self.StopVideoButton = QtWidgets.QPushButton(self.centralwidget)
        self.StopVideoButton.setGeometry(QtCore.QRect(5, 610, 141, 41))
        self.StopVideoButton.setObjectName("Stop")
        
        ## size of buttons related to Face lab, start/next
        self.FaceLabLabel = QtWidgets.QLabel(self.centralwidget)
        self.FaceLabLabel.setGeometry(QtCore.QRect(200, 530, 141, 41))
        self.FaceLabLabel.setObjectName("Facelab")
        self.FaceLabLabel.setFont(newfont)
        self.FaceLabStartButton = QtWidgets.QPushButton(self.centralwidget)
        self.FaceLabStartButton.setGeometry(QtCore.QRect(200, 570, 141, 41))
        self.FaceLabStartButton.setObjectName("Start")
        self.FaceLabNextButton = QtWidgets.QPushButton(self.centralwidget)
        self.FaceLabNextButton.setGeometry(QtCore.QRect(200, 610, 141, 41))
        self.FaceLabNextButton.setObjectName("Next")

        MainWindow.setCentralWidget(self.centralwidget)
        
        # defining a menu bar which only has quit option
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.menuMenu.addAction(self.actionQuit)
        self.menubar.addAction(self.menuMenu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        ######### These parts of codes added by myself for the functionality of 
        ######### buttons "Video Capture" & "EyeTracker"
        self.ConstructMutex()
        # trigger quit button with exiting application
        self.actionQuit.triggered.connect(self.ExitApp)
        # connecting starting button of video with the function 
        # StartVideoClicked
        self.StartVideoButton.clicked.connect(self.StartVideoClicked)
        # connecting stop video button with the function 
        # StopVideoClicked
        self.StopVideoButton.clicked.connect(self.StopVideoClicked)
        # connecting start/next button of face lab eye tracker with
        # the functions StartFaceLabClicked & NextFaceLabClicked
        self.FaceLabStartButton.clicked.connect(self.StartFaceLabClicked)
        self.FaceLabNextButton.clicked.connect(self.NextFaceLabClicked)

    # construct mutex & Condition 
    # used for synchronization between cameras & Face Lab EyeTracker
    def ConstructMutex(self):
        self.mutex = QtCore.QMutex()
        self.condition  = QtCore.QWaitCondition()
    
    # generated by QtDesigner
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        
        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        
        self.FaceLabLabel.setText(_translate("MainWindow", "EyeTracker"))
        self.FaceLabStartButton.setText(_translate("MainWindow", "Start"))
        self.FaceLabNextButton.setText(_translate("MainWindow", "Next"))
        
        self.VideoLabel.setText(_translate("MainWindow", "VideoCapture"))
        self.StartVideoButton.setText(_translate("MainWindow", "Start"))
        self.StopVideoButton.setText(_translate("MainWindow", "Stop"))
    
    # this function executes every time the button "next" of "EyeTracker"
    # is pushed 
    def NextFaceLabClicked(self):
        #receive the xyz of salient point and pass it to Facelab thread
        xyzPoint = self.cameraThread.GetXYZ() 
        self.faceLabThread.ReceiveSalientPoint(xyzPoint)
        self.faceLabThread.update()
    
    #instantiate the FaceLab eyetracker class 
    # this class receives its real-time data through a socket from the sensor
    # we pass the same self.mutex & self.condition for synchronization between two 
    # camera and eye tracker
    def StartFaceLabClicked(self):
        IP = '127.0.0.1'
        Port = 2002 
        self.faceLabThread = FacelabThread(IP, Port)  
        self.faceLabThread.signalIDSalient.connect(self.cameraThread.update)
        self.cameraThread.StartCalibration()
        self.faceLabThread.StartCalibration()
        self.faceLabThread.start() # launch the thread
    
    # terminate the face lab thread
    def StopFaceLab(self):
        self.faceLabThread.terminate()

    def StartVideoClicked(self):
        self.mutex.lock() # lock the mutex and start retrieving data from camera
        self.cameraThread = CameraThread(mutex = self.mutex, condition=self.condition)
        # connecting PyQT image signal for displaying image
        self.cameraThread.imageSignal.connect(self.setImage)
        self.cameraThread.terminationSignal.connect(self.RunPnP)
        self.cameraThread.start() # launch the thread
    
    def RunPnP(self,flag):
        
        if flag == -1:
            print("[info] Run PnP algorithm")
            self.faceLabThread.RunPnP()
        
    def StopVideoClicked(self):
        self.cameraThread.terminate()
        
    def setImage(self, image):
        
        self.mutex.lock() # lock the mutex which was unlocked by Camera thread to display image
        try:
            scene = QtWidgets.QGraphicsScene()
            item = QtWidgets.QGraphicsPixmapItem(QtGui.QPixmap.fromImage(image))
            scene.addItem(item)
            self.graphicsView.setScene(scene)
            
        finally:
            # unlock the mutex
            self.mutex.unlock()
            self.condition.wakeAll() # send signal to condition
      
    def ExitApp(self):
        self.StopVideoClicked()
        self.StopFaceLab()
        QtWidgets.QApplication.quit()


#main function to run QT GUI application
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

